<?phpnamespace backend\models;use Yii;/** * This is the model class for table "site_users". * * @property int $id * @property string $name * @property string $email * @property string $password * @property string $phone_number * @property string $auth_key * @property string $password_reset_token * @property string $last_login * @property int $created_at * @property int $updated_at * @property int $type 0 - User | 1 - Doctor | 2 - Enterprise * @property int $status */class SiteUsers extends \yii\db\ActiveRecord{    const STATUS_DELETED = 0;    const STATUS_ACTIVE = 1;    const STATUS_PENDING= 2;    const  TYPE_USER = 0;    const  TYPE_DOCTOR = 1;    const  TYPE_ENTERPRISE = 2;    public $user_types = ["0" => "İstifadəçi","1" => "Həkim","2" => "Obyekt"];    /**     * {@inheritdoc}     */    public static function get_Type()    {        return [            0 => 'İstifadəçi',            1 => 'Həkim',            2 => 'Obyekt',        ];    }    /**     *  Menu Types     */    public static function get_Status()    {        return [            0 => 'DeAktiv',            1 => 'Aktiv',            2 => 'Təsdiq Gözləyir'        ];    }    public static function tableName()    {        return 'site_users';    }    /**     * {@inheritdoc}     */    public function rules()    {        return [            [['name', 'email', 'password', 'phone_number', 'auth_key', 'last_login'], 'required'],            [['last_login'], 'safe'],            [['created_at', 'updated_at', 'type', 'status'], 'integer'],            [['name', 'email'], 'string', 'max' => 60],            [['password'], 'string', 'max' => 65],            [['phone_number'], 'string', 'max' => 20],            [['auth_key'], 'string', 'max' => 32],            [['password_reset_token'], 'string', 'max' => 255],        ];    }    /**     * {@inheritdoc}     */    public function attributeLabels()    {        return [            'id' => 'ID',            'name' => 'Ad Soyad',            'email' => 'Elektron Poçt',            'password' => 'Şifrə',            'phone_number' => 'Telefon',            'auth_key' => 'Auth Key',            'password_reset_token' => 'Password Reset Token',            'last_login' => 'Son giriş',            'created_at' => 'Yaradıldı',            'updated_at' => 'Yeniləndi',            'type' => 'Tip',            'status' => 'Status',        ];    }    /**     * {@inheritdoc}     */    public static function findIdentity($id)    {        return static::findOne(['id' => $id, 'status' => self::STATUS_ACTIVE]);    }    /**     * {@inheritdoc}     */    public static function findIdentityByAccessToken($token, $type = null)    {        throw new NotSupportedException('"findIdentityByAccessToken" is not implemented.');    }    /**     * Finds user by name     *     * @param string $name     * @return static|null     */    public static function findByName($name)    {        return static::findOne(['name' => $name, 'status' => self::STATUS_ACTIVE]);    }    public static function findByEmail($email)    {        return static::find()->where(['email' => $email])->andWhere(["in","status",[self::STATUS_ACTIVE,self::STATUS_PENDING]])->one();    }    /**     * Finds user by password reset token     *     * @param string $token password reset token     * @return static|null     */    public static function findByPasswordResetToken($token)    {        if (!static::isPasswordResetTokenValid($token)) {            return null;        }        return static::findOne([            'password_reset_token' => $token,            'status' => self::STATUS_ACTIVE,        ]);    }    /**     * Finds out if password reset token is valid     *     * @param string $token password reset token     * @return bool     */    public static function isPasswordResetTokenValid($token)    {        if (empty($token)) {            return false;        }        $timestamp = (int) substr($token, strrpos($token, '_') + 1);        $expire = Yii::$app->params['user.passwordResetTokenExpire'];        return $timestamp + $expire >= time();    }    /**     * {@inheritdoc}     */    public function getId()    {        return $this->getPrimaryKey();    }    /**     * {@inheritdoc}     */    public function getAuthKey()    {        return $this->auth_key;    }    /**     * {@inheritdoc}     */    public function validateAuthKey($authKey)    {        return $this->getAuthKey() === $authKey;    }    /**     * Validates password     *     * @param string $password password to validate     * @return bool if password provided is valid for current user     */    public function validatePassword($password)    {        return Yii::$app->security->validatePassword($password, $this->password);    }    /**     * Generates password hash from password and sets it to the model     *     * @param string $password     */    public function setPassword($password)    {        $this->password = Yii::$app->security->generatePasswordHash($password);    }    public function setRePassword($password)    {        $this->repassword = Yii::$app->security->generatePasswordHash($password);    }    /**     * Generates "remember me" authentication key     */    public function generateAuthKey()    {        $this->auth_key = Yii::$app->security->generateRandomString();    }    /**     * Generates new password reset token     */    public function generatePasswordResetToken()    {        $this->password_reset_token = Yii::$app->security->generateRandomString() . '_' . time();    }    /**     * Removes password reset token     */    public function removePasswordResetToken()    {        $this->password_reset_token = null;    }}