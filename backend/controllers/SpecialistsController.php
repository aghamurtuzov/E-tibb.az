<?phpnamespace backend\controllers;use Yii;use backend\models\SiteSpecialists;use backend\models\SiteSpecialistsSearch;use yii\web\Controller;use yii\web\NotFoundHttpException;use yii\filters\VerbFilter;use yii\web\UploadedFile;use backend\components\ImageUpload;use yii\filters\AccessControl;use backend\controllers\MainController;/** * SpecialistsController implements the CRUD actions for SiteSpecialists model. */class SpecialistsController extends MainController{    public $customPath = 'specialists';    /**     * @inheritdoc     */    public function behaviors()    {        return [            'access' => [                'class' => AccessControl::className(),                'only' => ['*'],                'rules' => [                    [                        'allow' => true,                        'roles' => ['@'],                    ],                ],            ],            'verbs' => [                'class' => VerbFilter::className(),                'actions' => [                    'delete' => ['POST'],                    'deletemore'=>['POST']                ],            ],        ];    }    /**     * Lists all SiteSpecialists models.     * @return mixed     */    public function actionIndex()    {        $searchModel = new SiteSpecialistsSearch();        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);        return $this->render('index', [            'searchModel' => $searchModel,            'dataProvider' => $dataProvider,        ]);    }    /**     * Creates a new SiteSpecialists model.     * If creation is successful, the browser will be redirected to the 'view' page.     * @return mixed     */    public function actionCreate()    {        $model = new SiteSpecialists();        if($model->load(Yii::$app->request->post()) && Yii::$app->request->post($model->getClassName()))        {            $icon = UploadedFile::getInstance($model,'icon');            if(!empty($icon))            {                $imageUpload = new ImageUpload();                $uploadedFile = $imageUpload->saveFile($icon,[                    'path.save'=>$this->customPath,                    'resize.img'=>[32,32]                ]);                if(!empty($uploadedFile)){ $model->icon = $uploadedFile; }            }            if($model->save())            {                Yii::$app->session->setFlash('success','Məlumat əlavə olundu');            }else{                Yii::$app->session->setFlash('error','Məlumatın əlavə olunması zamanı xəta baş verdi');            }            return $this->redirect(['index']);        };        return $this->render('create', [            'model' => $model,        ]);    }    /**     * Updates an existing SiteSpecialists model.     * If update is successful, the browser will be redirected to the 'view' page.     * @param integer $id     * @return mixed     * @throws NotFoundHttpException if the model cannot be found     */    public function actionUpdate($id)    {        $model = $this->findModel($id);        $oldModel = $this->findModel($id);        if($model->load(Yii::$app->request->post()) && Yii::$app->request->post($model->getClassName()))        {            $deletedImages = Yii::$app->request->post('deletedImages');            if(!empty($deletedImages) && $deletedImages == $oldModel->id)            {                $imageUpload = new ImageUpload();                $imageUpload->deleteFile([$this->customPath.'/'.$oldModel->icon]);                $model->icon = '';            }            $icon = UploadedFile::getInstance($model,'icon');            if(!empty($icon))            {                $imageUpload = new ImageUpload();                $uploadedFile = $imageUpload->saveFile($icon,[                    'path.save'=>$this->customPath,                    'resize.img'=>[32,32]                ]);                if(!empty($uploadedFile)){ $model->icon = $uploadedFile; }            }else{                $model->icon = $oldModel->icon;            }            if($model->save())            {                Yii::$app->session->setFlash('success','Məlumatlar yeniləndi');            }else{                Yii::$app->session->setFlash('error','Xəta baş verdi');            }            return $this->redirect(['index']);        };        return $this->render('update', [            'model' => $model,            'customPath' => $this->customPath        ]);    }    /**     * Deletes an existing AdminUsers model.     * If deletion is successful, the browser will be redirected to the 'index' page.     * @param integer $id     * @return mixed     * @throws NotFoundHttpException if the model cannot be found     */    public function actionDelete($id)    {        $model = $this->findModel($id);        $imageUpload = new ImageUpload();        $imageUpload->deleteFile([$this->customPath.'/'.$model->icon]);        $imageUpload->deleteFile([$this->customPath.'/small/'.$model->icon]);        if($model->delete()){            Yii::$app->session->setFlash('success','Məlumat silindi.');        }else{            Yii::$app->session->setFlash('error','Məlumat silinmədi');        }        return $this->redirect(['index']);    }    public function actionDeletemore()    {        $ids = Yii::$app->request->post('del_check');        if(!empty($ids))        {            foreach ($ids as $id)            {                $this->actionDelete($id);            }            Yii::$app->session->setFlash('success','Məlumatlar silindi.');        }else{            Yii::$app->session->setFlash('error','Heç bir seçim edilməyib.');        }        return $this->redirect(Yii::$app->request->referrer ?: Yii::$app->homeUrl);    }    /**     * Finds the SiteSpecialists model based on its primary key value.     * If the model is not found, a 404 HTTP exception will be thrown.     * @param integer $id     * @return SiteSpecialists the loaded model     * @throws NotFoundHttpException if the model cannot be found     */    protected function findModel($id)    {        if (($model = SiteSpecialists::findOne($id)) !== null) {            return $model;        }        throw new NotFoundHttpException('The requested page does not exist.');    }}