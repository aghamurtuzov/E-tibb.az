<?phpnamespace backend\controllers;use backend\models\Email;use backend\models\SiteEnterprises;use backend\models\SiteGallery;use backend\models\SitePromotions;use backend\models\SiteTransactions;use backend\models\SiteServicesMember;use backend\models\SiteSosialLinks;use Yii;use yii\web\Controller;use yii\web\NotFoundHttpException;use yii\filters\VerbFilter;use yii\filters\AccessControl;use backend\models\SiteDoctors;use backend\models\SiteDoctorsSearch;use backend\components\ImageUpload;use backend\components\Functions;use backend\models\SiteDoctorSpecialist;use backend\models\SitePhoneNumbers;use backend\models\SiteDoctorWorkplaces;use yii\web\UploadedFile;use backend\models\SiteAddresses;use backend\models\SiteSpecialists;use backend\models\SiteUsers;use backend\models\Sms;use backend\models\SiteDoctorFilesModel;use backend\models\ViewDoctorSpecialist;use backend\controllers\MainController;/** * DoctorsController implements the CRUD actions for SiteDoctors model. */class DoctorsController extends MainController{    const TYPE = 1;    public $customPath = 'doctors';    /**     * {@inheritdoc}     */    public function behaviors()    {        return [            'access' => [                'class' => AccessControl::className(),                'only' => ['*'],                'rules' => [                    [                        'allow' => true,                        'roles' => ['@'],                    ],                ],            ],            'verbs' => [                'class' => VerbFilter::className(),                'actions' => [                    'delete' => ['POST'],                    'deletemore'=>['POST']                ],            ],        ];    }    /**     * Lists all SiteDoctors models.     * @return mixed     */    public function actionIndex()    {        $searchModel = new SiteDoctorsSearch();        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);        return $this->render('index', [            'searchModel' => $searchModel,            'dataProvider' => $dataProvider,            'customPath' => $this->customPath        ]);    }    /**     * Displays a single SiteDoctors model.     * @param integer $id     * @return mixed     * @throws NotFoundHttpException if the model cannot be found     */    public function actionView($id)    {        $model = $this->findModel($id);        $doctor_transactions = SiteTransactions::getAllOrderedServices($id);        $promotions = SitePromotions::find()->where(['connect_id'=>$model->id,'type'=>1])->all();        return $this->render('view', [            'model' => $model,            'promotions' => $promotions,            'user'  => SiteUsers::findOne($id),            'transactions'=>$doctor_transactions,            'customPath' => $this->customPath,            'smsModel' => new Sms(),            'emailModel' => new Email()        ]);    }    /**     * Creates a new SiteDoctors model.     * If creation is successful, the browser will be redirected to the 'view' page.     * @return mixed     */    public function actionCreate()    {        $model  = new SiteDoctors();        $user   = new SiteUsers();        $obj_id = null;        if (Yii::$app->request->post($model->getClassName()) && $model->load(Yii::$app->request->post())) {            //print_r($model->phone_numbers[0]['number']); die();            /** Create User */            $user->name         = $model->name;            $user->email        = $model->email;            $user->phone_number = $model->phone_numbers[0]['number'];            $user->status       = 1;            $user->created_at   = time();            $user->last_login   = date("Y-m-d H:i:s");            $user->type         = self::TYPE;            $user->birthday     = date("Y-m-d",strtotime($model->birthday));            $user->password     = md5($model->name.'-'.$user->phone_number);            $user->setPassword($user->password);            $user->generateAuthKey();            if($user->save()) {                //$datetime = date('Y-m-d', strtotime("-1 day", strtotime(Yii::$app->params['current.date'])));                $datetime = date('Y-m-d', strtotime("+1 month", strtotime(Yii::$app->params['current.date'])));                $model->expires     = $datetime;                //$model->vip_expires = $datetim2;                $model->slug            = Functions::slugify($model->name,['transliterate' => true]);                $model->user_id         = $user->id;                $model->status          = 1;                $model->published_time  = date('Y-m-d H:i:s');                $model->modified_time   = date('Y-m-d H:i:s');                if ($model->home_doctor) {                    $model->feature = 1;                }                if ($model->child_doctor) {                    $model->feature = 2;                }                if ($model->home_doctor && $model->child_doctor) {                    $model->feature = 3;                }                if ($model->save()) {                    /** Specialists **/                    if (is_array($model->specialists)) {                        foreach ($model->specialists as $key => $val) {                            $doctors_specialist = new SiteDoctorSpecialist();                            $doctors_specialist->doctor_id = $model->id;                            $doctors_specialist->specialist_id = $val;                            if ($doctors_specialist->save()) {                                $siteSpc = SiteSpecialists::find()->where(['id' => $val])->one();                                $siteSpc->count = $siteSpc->count + 1;                                $siteSpc->save();                            }                        }                    }                    /** Sosial links **/                    if (isset($model->sosial_links[0]['link']) && !empty($model->sosial_links[0]['link'])) {                        foreach ($model->sosial_links as $key => $val) {                            if (!empty($val['link'])) {                                $sosial_links = new SiteSosialLinks();                                $sosial_links->connect_id = $model->id;                                $sosial_links->link = $val['link'];                                $sosial_links->link_type = $val['type'];                                $sosial_links->type = self::TYPE;                                $sosial_links->save();                            }                        }                    }                    /** Phone numbers **/                    if (isset($model->phone_numbers[0]['number']) && !empty($model->phone_numbers[0]['number'])) {                        foreach ($model->phone_numbers as $key => $val) {                            if (!empty($val['number'])) {                                $phone_numbers = new SitePhoneNumbers();                                $phone_numbers->connect_id = $model->id;                                $phone_numbers->number = $val['number'];                                $phone_numbers->number_type = $val['type'];                                $phone_numbers->type = self::TYPE;                                $phone_numbers->save();                            }                        }                    }                    /** Work places  **/                    if (isset($model->workplaces_list) && !empty($model->workplaces_list)) {                        SiteDoctorWorkplaces::deleteAll('doctor_id = :doctor', [':doctor' => $model->id]);                        foreach ($model->workplaces_list as $val) {                            $workplaces = new SiteDoctorWorkplaces();                            if (!empty($val['name']) and !empty($val['address'])) {                                $workplaces->name = !empty($val['name']) ? $val['name'] : null;                                $workplaces->address = !empty($val['address']) ? $val['address'] : null;                                $workplaces->doctor_id = $model->id;                                $workplaces->save();                            }                        }                    }                    /** Main image & Photosession **/                    $photos = UploadedFile::getInstances($model, 'files');                    if (!empty($photos)) {                        foreach ($photos as $key => $photo) {                            $imageUpload = new ImageUpload();                            if ($key != 0) {                                $uploadedFile = $imageUpload->saveFile($photo, [                                    'path.save' => $this->customPath,                                    'resize.img' => [708, 420],                                    'resize.thumb' => [185, 110]                                ]);                                $updatePhoto = $model;                                $updatePhoto->photo = $uploadedFile;                                $updatePhoto->save(false);                            } else {                                $uploadedFile = $imageUpload->saveFile($photo, [                                    'path.save' => $this->customPath,                                    'resize.img' => [185, 185],                                    'resize.thumb' => [137, 137]                                ]);                                $updatePhoto = $model;                                $updatePhoto->photo = $uploadedFile;                                $updatePhoto->save(false);                            }                        }                    }                    /** Diplomas*/                    $photos2 = UploadedFile::getInstances($model, 'dp_files');                    if (!empty($photos2)) {                        Functions::uploadDoctorFiles($photos2, $model->id, 1, $this->customPath);                    }                    /** Certificates*/                    $photos3 = UploadedFile::getInstances($model, 'ct_files');                    if (!empty($photos3)) {                        Functions::uploadDoctorFiles($photos3, $model->id, 2, $this->customPath);                    }                    Yii::$app->session->setFlash('success', 'Məlumat əlavə olundu');                } else {                    Yii::$app->session->setFlash('error', 'Məlumatın əlavə olunması zamanı xəta baş verdi');                }                return $this->redirect(['index']);            }        }        return $this->render('create', [            'model' => $model        ]);        }    /**     * Updates an existing SiteDoctors model.     * If update is successful, the browser will be redirected to the 'view' page.     * @param integer $id     * @return mixed     * @throws NotFoundHttpException if the model cannot be found     */    public function actionUpdate($id)    {        $model    = $this->findModel($id);        $old_photo= $model->photo;        if($model->load(Yii::$app->request->post()) && Yii::$app->request->post($model->getClassName()))        {            //echo $model->degree;            //exit();            //echo '<pre>';            //print_r(Yii::$app->request->post());            //print_r($model->workplaces_list);            //exit();            /** Work places  */            if(isset($model->workplaces_list) && !empty($model->workplaces_list))            {                SiteDoctorWorkplaces::deleteAll('doctor_id = :doctor',[':doctor' => $model->id]);                foreach($model->workplaces_list as $val)                {                    $workplaces            = new SiteDoctorWorkplaces();                    if(!empty($val['name']) and !empty($val['address']) ){                        $workplaces->name      = !empty($val['name']) ? $val['name'] : null;                        $workplaces->address   = !empty($val['address']) ? $val['address'] : null;                        $workplaces->doctor_id = $model->id;                        $workplaces->save();                    }                }            }            $datetime = date('Y-m-d', strtotime("-1 day", strtotime(Yii::$app->params['current.date'])));            if($model->home_doctor){ $model->feature = 1; }            if($model->child_doctor){ $model->feature = 2; }            if($model->home_doctor && $model->child_doctor){ $model->feature = 3; }            /** Specialists */            $spc_selected_options = !empty($model->spc_selected_options) ? json_decode(base64_decode($model->spc_selected_options)) : [];            $specialists          = !empty($model->specialists) ? $model->specialists : [];            $spcDeleteOptions = array_diff($spc_selected_options,$specialists);            $spcAddOptions    = array_diff($specialists,$spc_selected_options);            if(!empty($spcAddOptions))            {                foreach($spcAddOptions as $key => $val)                {                    $doctors_specialist                = new SiteDoctorSpecialist();                    $doctors_specialist->doctor_id     = $model->id;                    $doctors_specialist->specialist_id = $val;                    if($doctors_specialist->save())                    {                        $siteSpc = SiteSpecialists::find()->where(['id'=>$val])->one();                        $siteSpc->count = $siteSpc->count+1;                        $siteSpc->save();                    }                }            }            if(!empty($spcDeleteOptions))            {                foreach($spcDeleteOptions as $key => $val)                {                    $spcDelete = SiteDoctorSpecialist::find()->where(['doctor_id'=>$model->id,'specialist_id'=>$val])->one();                    if(!empty($spcDelete))                    {                        $siteSpc = SiteSpecialists::find()->where(['id'=>$val])->one();                        $siteSpc->count = $siteSpc->count-1;                        if($siteSpc->count<0)                        {                            $siteSpc->count = 0;                        }                        $siteSpc->save();                        $spcDelete->delete();                    }                }            }            /** Sosial links */            if(isset($model->sosial_links) && !empty($model->sosial_links))            {                $added_sosial_links   = !empty($model->added_sosial_links) ? json_decode(base64_decode($model->added_sosial_links),true) : [];                $sosial_links         = !empty($model->sosial_links) ? $model->sosial_links : [];                $max                  = max(count($added_sosial_links),count($sosial_links));                for($x=0;$x<$max;$x++)                {                    if(isset($added_sosial_links[$x]['type']))                    {                        if(!empty($sosial_links[$x]['link']))                        {                            if(($added_sosial_links[$x]['type'] != $sosial_links[$x]['type']) || ($added_sosial_links[$x]['link'] != $sosial_links[$x]['link']))                            {                                $upd_sosial_links = SiteSosialLinks::findOne($added_sosial_links[$x]['id']);                                $upd_sosial_links->link       = $sosial_links[$x]['link'];                                $upd_sosial_links->link_type  = $sosial_links[$x]['type'];                                $upd_sosial_links->save(false);                            }                        }else{                            $SosialLinksDelete = SiteSosialLinks::findOne($added_sosial_links[$x]['id']);                            if(!empty($SosialLinksDelete)){ $SosialLinksDelete->delete(); }                        }                    }elseif(isset($sosial_links[$x]['type']) && !empty($sosial_links[$x]['link'])){                        $ins_sosial_links             = new SiteSosialLinks();                        $ins_sosial_links->connect_id = $model->id;                        $ins_sosial_links->link       = $sosial_links[$x]['link'];                        $ins_sosial_links->link_type  = $sosial_links[$x]['type'];                        $ins_sosial_links->type       = self::TYPE;                        $ins_sosial_links->save();                    }                };            }            /** Phone numbers */            if(isset($model->phone_numbers) && !empty($model->phone_numbers))            {                $added_phone_numbers  = !empty($model->added_phone_numbers) ? json_decode(base64_decode($model->added_phone_numbers),true) : [];                $phone_numbers        = !empty($model->phone_numbers) ? $model->phone_numbers : [];                $max                  = max(count($added_phone_numbers),count($phone_numbers));                for($x=0;$x<$max;$x++)                {                    if(isset($added_phone_numbers[$x]['type']))                    {                        if(!empty($phone_numbers[$x]['number']))                        {                            if(($added_phone_numbers[$x]['type'] != $phone_numbers[$x]['type']) || ($added_phone_numbers[$x]['number'] != $phone_numbers[$x]['number']))                            {                                $upd_phone_numbers = SitePhoneNumbers::findOne($added_phone_numbers[$x]['id']);                                $upd_phone_numbers->number       = $phone_numbers[$x]['number'];                                $upd_phone_numbers->number_type  = $phone_numbers[$x]['type'];                                $upd_phone_numbers->save(false);                            }                        }else{                            $del_phone_numbers = SitePhoneNumbers::findOne($added_phone_numbers[$x]['id']);                            if(!empty($del_phone_numbers)){ $del_phone_numbers->delete(); }                        }                    }elseif(isset($phone_numbers[$x]['type']) && !empty($phone_numbers[$x]['number'])){                        $ins_phone_numbers = new SitePhoneNumbers();                        $ins_phone_numbers->connect_id  = $model->id;                        $ins_phone_numbers->number      = $phone_numbers[$x]['number'];                        $ins_phone_numbers->number_type = $phone_numbers[$x]['type'];                        $ins_phone_numbers->type        = self::TYPE;                        $ins_phone_numbers->save();                    }                };            }            /** Main image & Photosession */                $deletedImages = $model->deletedImages;                if(!empty($deletedImages))                {                    $delete = $old_photo;                    if(!empty($delete))                    {                        $imageUpload = new ImageUpload();                        $imageUpload->deleteFile([$this->customPath.'/'.$delete]);                        $imageUpload->deleteFile([$this->customPath.'/small/'.$delete]);                        $updatePhoto = $this->findModel($model->id);                        $updatePhoto->photo = '';                        $updatePhoto->save(false);                    }                }                $photos = UploadedFile::getInstances($model,'files');                if(!empty($photos))            {                foreach($photos as $key => $photo)                {                    $imageUpload = new ImageUpload();                    if($key != 0)                    {                        $uploadedFile = $imageUpload->saveFile($photo,[                            'path.save'=>$this->customPath,                            'resize.img'=>[708,420],                            'resize.thumb'=>[185,110]                        ]);                        $updatePhoto        = $model;                        $updatePhoto->photo = $uploadedFile;                        $updatePhoto->save(false);                    }else{                        $uploadedFile = $imageUpload->saveFile($photo,[                            'path.save'=>$this->customPath,                            'resize.img' => [185,185],                            'resize.thumb'=>[137,137]                        ]);                        $updatePhoto        = $model;                        $updatePhoto->photo = $uploadedFile;                        $updatePhoto->save(false);                    }                }            }            /** Diplomas*/                $deletedDiplomas = $model->deletedDiplomas;                if(!empty($deletedDiplomas))                {                    Functions::deleteDoctorFiles(1,$deletedDiplomas,$this->customPath,$model->id);                }                $photos2 = UploadedFile::getInstances($model,'dp_files');                if(!empty($photos2))                {                    Functions::uploadDoctorFiles($photos2, $model->id,1,$this->customPath);                }            /** Certificates*/                $deletedCertificates = $model->deletedCertificates;                if(!empty($deletedCertificates))                {                    Functions::deleteDoctorFiles(2,$deletedCertificates,$this->customPath,$model->id);                }                $photos3 = UploadedFile::getInstances($model,'ct_files');                if(!empty($photos3))                {                    Functions::uploadDoctorFiles($photos3, $model->id,2,$this->customPath);                }            if($model->save())            {                Yii::$app->session->setFlash('success','Məlumatlar yeniləndi');            }else{                Yii::$app->session->setFlash('error','Xəta baş verdi');            }            return $this->redirect(['index']);        }        return $this->render('update', [            'model' => $model,            'customPath' => $this->customPath        ]);    }    /**     * Deletes an existing SiteDoctors model.     * If deletion is successful, the browser will be redirected to the 'index' page.     * @param integer $id     * @return mixed     * @throws NotFoundHttpException if the model cannot be found     */    public function actionDelete($id,$user_del=0)    {        $model = $this->findModel($id);        $imageUpload = new ImageUpload();        $imageUpload->deleteFile([$this->customPath.'/'.$model->photo]);        $imageUpload->deleteFile([$this->customPath.'/small/'.$model->photo]);        $gallery = SiteGallery::find()->where(['connect_id'=>$model->id,'type'=>self::TYPE])->all();        if(!empty($gallery))        {            foreach($gallery as $key => $val)            {                $imageUpload->deleteFile([$this->customPath.'/'.$val['photo']]);                $imageUpload->deleteFile([$this->customPath.'/small/'.$val['photo']]);                $val->delete();            }        }        $specialists = SiteDoctorSpecialist::find()->where(['doctor_id'=>$model->id])->all();        if(!empty($specialists))        {            foreach($specialists as $key => $val)            {                $siteSpc = SiteSpecialists::find()->where(['id'=>$val['specialist_id']])->one();                $siteSpc->count = $siteSpc->count-1;                if($siteSpc->count<0)                {                    $siteSpc->count = 0;                }                $siteSpc->save();                $val->delete();            }        }        $sosiallinks = SiteSosialLinks::find()->where(['connect_id'=>$model->id,'type'=>self::TYPE])->all();        if(!empty($sosiallinks))        {            foreach($sosiallinks as $key => $val)            {                $val->delete();            }        }        $numbers = SitePhoneNumbers::find()->where(['connect_id'=>$model->id,'type'=>self::TYPE])->all();        if(!empty($numbers))        {            foreach($numbers as $key => $val)            {                $val->delete();            }        }        $workplaces = SiteDoctorWorkplaces::find()->where(['doctor_id'=>$model->id])->all();        if(!empty($workplaces))        {            foreach($workplaces as $key => $val)            {                $val->delete();            }        }        if($user_del!=0){            $user_data = SiteUsers::findOne($model->user_id);            if(!empty($user_data)){                if($user_data->type == 1){                    $user_data->delete();                }            }        }        if($model->delete()){            Yii::$app->session->setFlash('success','Məlumat silindi.');        }else{            Yii::$app->session->setFlash('error','Məlumat silinmədi');        }        return $this->redirect(['index']);    }    public function actionDeletemore()    {        $ids = Yii::$app->request->post('del_check');        if(!empty($ids))        {            foreach ($ids as $id)            {                $this->actionDelete($id,1);            }            Yii::$app->session->setFlash('success','Məlumatlar silindi.');        }else{            Yii::$app->session->setFlash('error','Heç bir seçim edilməyib.');        }        return $this->redirect(Yii::$app->request->referrer ?: Yii::$app->homeUrl);    }    /**     * Finds the SiteDoctors model based on its primary key value.     * If the model is not found, a 404 HTTP exception will be thrown.     * @param integer $id     * @return SiteDoctors the loaded model     * @throws NotFoundHttpException if the model cannot be found     */    protected function findModel($id)    {        if (($model = SiteDoctors::findOne($id)) !== null) {            return $model;        }        throw new NotFoundHttpException('The requested page does not exist.');    }}