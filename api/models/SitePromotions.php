<?phpnamespace api\models;use Yii;use backend\models\SiteDoctors;use backend\models\SiteEnterprises;/** * This is the model class for table "site_promotions". * * @property int $id * @property string $headline * @property int $price * @property int $discount * @property string $date_start * @property string $date_end * @property string $photo * @property string $organizer * @property int $connect_id * @property int $type 1 - Doctor | 2 - Enterprise */class SitePromotions extends \yii\db\ActiveRecord{    /**     * {@inheritdoc}     */    public $files;    public $mainImage;    public $deletedImages;    public static function tableName()    {        return 'site_promotions';    }    public static function change_Promotion($id, $type, $mode, $edited_id = null)    {        switch ($mode) {            case 'add':                if ($type == 1) {                    $model = SiteDoctors::findOne($id);                    $model->promotion = $model->promotion + 1;                    $model->save(false);                } else {                    $model = SiteEnterprises::findOne($id);                    $model->promotion = $model->promotion + 1;                    $model->save(false);                }                break;            case 'edit':                if ($type == 1) {                    if (!empty($edited_id)) {                        $model = SiteDoctors::findOne($id);                        $model->promotion = $model->promotion + 1;                        $model->save(false);                        $model2 = SiteDoctors::findOne($edited_id);                        $model2->promotion = (empty($model2->promotion)) ? 0 : $model2->promotion - 1;                        $model2->save(false);                    }                } else {                    if (!empty($edited_id)) {                        $model = SiteEnterprises::findOne($id);                        $model->promotion = $model->promotion + 1;                        $model->save();                        $model2 = SiteEnterprises::findOne($edited_id);                        $model2->promotion = (empty($model2->promotion)) ? 0 : $model2->promotion - 1;                        $model2->save(false);                    }                }                break;            case 'delete':                if ($type == 1) {                    $model = SiteDoctors::findOne($id);                    $model->promotion = (empty($model->promotion)) ? 0 : $model->promotion - 1;                    $model->save(false);                } else {                    $model = SiteEnterprises::findOne($id);                    $model->promotion = (empty($model->promotion)) ? 0 : $model->promotion - 1;                    $model->save(false);                }                break;            default:                break;        }    }    /**     * Get status     */    public static function get_Status()    {        return [            0 => 'DeAktiv',            1 => 'Aktiv',            2 => 'Gözləmədə'        ];    }    /**     * Get type     */    public static function get_Type()    {        return [            1 => 'Həkim',            2 => 'Korporativ',        ];    }    /**     * {@inheritdoc}     */    public function rules()    {        return [            [['headline','date_start','price','content'], 'required'],            [['price', 'discount', 'connect_id','type','status'], 'integer'], //'notification_status'            ['organizer', 'required', 'when' => function($model) {                return empty($model->type) || empty($model->connect_id);            }],            [['type', 'connect_id'], 'required', 'when' => function($model) {                return empty($model->organizer);            }],            [['connect_id', 'type'], 'default', 'value' => 0],            [['content'], 'string'],            ['date','safe'],            [['date_start', 'date_end'], 'date', 'format' => 'php:Y-m-d', 'when' => function($model) {                return !empty($model->date_end);            }],            ['date_start', 'compare', 'compareValue' => date('Y-m-d'), 'operator' => '>=', 'message' => 'Tarix geriyə seçilə bilməz'],            ['date_end', 'compare', 'compareValue' => date('Y-m-d'), 'operator' => '>=', 'message' => 'Tarix geriyə seçilə bilməz'],            [['headline', 'organizer'], 'string', 'max' => 250],            [['photo','mainImage','deletedImages'],'string'],        ];    }    /**     * {@inheritdoc}     */    public function attributeLabels()    {        return [            'id' => 'ID',            'headline' => 'Başlıq',            'content' => 'Kontent',            'price' => 'Qiymət',            'discount' => 'Endirim',            'date_start' => 'Başlanğıc Tarix',            'date_end' => 'Bitiş Tarix',            'photo' => 'Şəkil',            'organizer' => 'Oqanizator',            'connect_id' => 'Əlaqədar',            'type' => 'Tip',        ];    }    public function search($search)    {        if ($search['status']=='all'){            $status = ' status <> 3';        }        else{            $status = "status= ".$search['status']." AND status <> 2";        }        $organizer = !empty($search['organizer']) ? $search['organizer'] : '----';        $date_start = !empty($search['date_start']) ? $search['date_start'] : '----';        return Yii::$app->db->createCommand("SELECT * FROM `view_enterprises_search` WHERE ".$status." AND ((`organizer` LIKE '%$organizer%') OR (`doctor_name` LIKE '%$organizer%') OR (`enter_name` LIKE '%$organizer%') OR (`date_start` LIKE '%$date_start%'))")->queryAll();    }    public function usedSearch($search)    {        if ($search['status']=='all'){            $status = 'status <> 3';        }        else{            $status = "status= ".$search['status']." AND status <> 3";        }        $organizer = !empty($search['organizer']) ? $search['organizer'] : '----';        $date_start = !empty($search['date_start']) ? $search['date_start'] : date('Y-m-d');        $date_end = !empty($search['date_end']) ? $search['date_end'] : date('Y-m-d');        return Yii::$app->db->createCommand("SELECT * FROM `view_promotions_used_search` WHERE ".$status." AND ((`organizer` LIKE '%$organizer%') OR (`doctor_name` LIKE '%$organizer%') OR (`enter_name` LIKE '%$organizer%') OR (`created_at` BETWEEN CAST('$date_start' AS DATE) AND CAST('$date_end' AS DATE)))")->queryAll();    }    public static function promotionFind($id)    {        return Yii::$app->db->createCommand("SELECT * FROM `site_promotions` WHERE `id`=:id", [':id' => $id])->queryOne();    }}