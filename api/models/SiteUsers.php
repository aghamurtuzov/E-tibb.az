<?phpnamespace api\models;use Yii;use yii\web\IdentityInterface;use yii\db\ActiveRecord;/** * This is the model class for table "admin_users". * * @property int $id * @property string $name * @property string $email * @property string $password * @property int $status * @property string $permissions * @property string $phone_prefix */class SiteUsers extends ActiveRecord implements IdentityInterface{    const STATUS_DELETED = 0;    const STATUS_ACTIVE = 1;    const STATUS_PENDING = 2;    const  TYPE_USER = 0;    const  TYPE_DOCTOR = 1;    const  TYPE_ENTERPRISE = 2;    /**     * @inheritdoc     */    public static function tableName()    {        return 'site_users';    }    public function getClassName()    {        $exp = explode('\\', __CLASS__);        return $exp[count($exp) - 1];    }    public static function get_Type()    {        return [            0 => 'İstifadəçi',            1 => 'Həkim',            2 => 'Obyekt',        ];    }    /**     *  Menu Types     */    public static function get_Status()    {        return [            0 => 'DeAktiv',            1 => 'Aktiv',            2 => 'Təsdiq Gözləyir'        ];    }    /**     * @inheritdoc     */    public function rules()    {        return [            [['name', 'email', 'password', 'status', 'birthday'], 'required', 'message' => '{attribute} xanasını boş buraxmayın'],            [['email', 'name', 'password'], 'trim'],            ['email', 'unique', 'targetClass' => '\api\models\SiteUsers', 'message' => 'Bu email ilə istifadəçi artıq qeydiyyatdan keçmişdir.'],            ['email', 'email'],            ['type', 'in', 'range' => [0, 1, 2]],            ['status', 'default', 'value' => self::STATUS_ACTIVE],            ['status', 'in', 'range' => [self::STATUS_ACTIVE, self::STATUS_DELETED, self::STATUS_PENDING]],            [['name'], 'string', 'min' => 3, 'max' => 100],            ['email', 'string', 'max' => 60],            [['password'], 'string', 'max' => 65]        ];    }    /**     * @inheritdoc     *     * public function fields()     * {     * $fields = parent::fields();     * unset($fields['auth_key'],$fields['password']);     * return $fields;     * }     */    /**     * @inheritdoc     */    public function attributeLabels()    {        return [            'id' => 'ID',            'name' => 'Ad',            'email' => 'İstifadəçi emaili',            'password' => 'Şifrə',            'status' => 'Status',        ];    }    /**     * {@inheritdoc}     */    public static function findIdentity($id)    {        return static::findOne(['id' => $id, 'status' => self::STATUS_ACTIVE]);    }    /**     * {@inheritdoc}     */    public static function findIdentityByAccessToken($token, $type = null)    {        throw new NotSupportedException('"findIdentityByAccessToken" is not implemented.');    }    /**     * Finds user by email     *     * @param string $email     * @return static|null     */    public static function findByemail($email)    {        return static::findOne(['email' => $email, 'status' => self::STATUS_ACTIVE]);    }    /**     * {@inheritdoc}     */    public function getId()    {        return $this->getPrimaryKey();    }    /**     * {@inheritdoc}     */    public function getAuthKey()    {        return $this->auth_key;    }    /**     * {@inheritdoc}     */    public function validateAuthKey($authKey)    {        return $this->getAuthKey() === $authKey;    }    /**     * Validates password     * @param string $password password to validate     * @return bool if password provided is valid for current user     */    public function validatePassword($password)    {        return Yii::$app->security->validatePassword($password, $this->password);    }    /**     * Generates password hash from password and sets it to the model     * @param string $password     */    public function setPassword($password)    {        $this->password = Yii::$app->security->generatePasswordHash($password);    }    /**     * Generates "remember me" authentication key     */    public function generateAuthKey()    {        $this->auth_key = Yii::$app->security->generateRandomString();    }}