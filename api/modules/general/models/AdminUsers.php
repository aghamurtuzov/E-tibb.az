<?phpnamespace api\modules\general\models;use api\models\SiteDoctors;use Yii;use yii\base\NotSupportedException;use yii\behaviors\TimestampBehavior;use yii\web\IdentityInterface;use yii\db\ActiveRecord;/** * This is the model class for table "admin_users". * * @property int $id * @property string $name * @property string $username * @property string $password * @property int $status * @property string $permissions */class AdminUsers extends ActiveRecord implements IdentityInterface{    public $permissions;    public $selectedOptions;    public $password_repeat;    const STATUS_ACTIVE = 1;    const STATUS_DEACTIVE = 0;    /**     * @inheritdoc     */    public static function tableName()    {        return 'admin_users';    }    public function behaviors()    {        return [            TimestampBehavior::className(),        ];    }    public function getClassName()    {        $exp = explode('\\', __CLASS__);        return $exp[count($exp) - 1];    }    /**     * @inheritdoc     */    public function rules()    {        $rules = [            [['name', 'username', 'status', 'phone', 'email', 'permissions'], 'required', 'message' => '{attribute} xanasını boş buraxmayın'],            [["password", "password_repeat"], "required", "when" => function ($model) {                return $model->isNewRecord or !empty($model->password);            }, 'message' => '{attribute} xanasını boş buraxmayın'],            ['email', 'unique', 'targetClass' => '\api\modules\general\models\AdminUsers', 'message' => 'Bu email ilə istifadəçi artıq qeydiyyatdan keçmişdir.'],            ['username', 'unique', 'targetClass' => '\api\modules\general\models\AdminUsers', 'message' => 'Bu username ilə istifadəçi artıq qeydiyyatdan keçmişdir.'],            [['name', 'username', 'password'], 'trim'],            [['name', 'username'], 'string', 'min' => 3, 'max' => 30],            [['permissions'], 'string', 'max' => 250],            [['password'], 'string', 'max' => 65, 'min' => 6],            ['status', 'default', 'value' => self::STATUS_ACTIVE],            ['status', 'in', 'range' => [self::STATUS_ACTIVE, self::STATUS_DEACTIVE]],            ['email', 'email'],            ['email', 'string', 'min' => 6, 'max' => 60],            [['phone'], 'string', 'min' => 10, 'max' => 10],            ['password_repeat', 'compare', 'compareAttribute' => 'password', 'message' => "Şifrə ilə təkrar şifrə eyni deyil"],        ];        return $rules;    }//'skipOnEmpty' => false    /**     * @inheritdoc     *     * public function fields()     * {     * $fields = parent::fields();     *     * unset($fields['auth_key'],$fields['password']);     *     * return $fields;     * }     */    /**     * @inheritdoc     */    public function attributeLabels()    {        return [            'id' => 'ID',            'name' => 'Ad',            'username' => 'İstifadəçi adı',            'password' => 'Şifrə',            'status' => 'Status',            'permissions' => 'İcazələr',            'password_repeat' => 'Təkrar şifrə',            'phone' => 'Nömrə',            'email' => 'Email'        ];    }    /**     * {@inheritdoc}     */    public static function findIdentity($id)    {        return static::findOne(['id' => $id, 'status' => self::STATUS_ACTIVE]);    }    public static function findByEmail($email)    {        return static::findOne(['email' => $email, 'status' => self::STATUS_ACTIVE]);    }    /**     * {@inheritdoc}     */    public static function findIdentityByAccessToken($token, $type = null)    {        throw new NotSupportedException('"findIdentityByAccessToken" is not implemented.');    }    /**     * Finds user by username     *     * @param string $username     * @return static|null     */    public static function findByUsername($username)    {        return static::findOne(['username' => $username, 'status' => self::STATUS_ACTIVE]);    }    /**     * {@inheritdoc}     */    public function getId()    {        return $this->getPrimaryKey();    }    /**     * {@inheritdoc}     */    public function getAuthKey()    {        return $this->auth_key;    }    /**     * {@inheritdoc}     */    public function validateAuthKey($authKey)    {        return $this->getAuthKey() === $authKey;    }    /**     * Validates password     *     * @param string $password password to validate     * @return bool if password provided is valid for current user     */    public function validatePassword($password)    {        return Yii::$app->security->validatePassword($password, $this->password);    }    /**     * Generates password hash from password and sets it to the model     *     * @param string $password     */    public function setPassword($password)    {        $this->password = Yii::$app->security->generatePasswordHash($password);    }    public function setRePassword($password)    {        $this->repassword = Yii::$app->security->generatePasswordHash($password);    }    /**     * Generates "remember me" authentication key     */    public function generateAuthKey()    {        $this->auth_key = Yii::$app->security->generateRandomString();    }    public static function getAdmins()    {        return Yii::$app->db->createCommand("SELECT admin.`id`,admin.`name`,admin.`username`,admin.`email`,admin.`phone`,admin.`status`,permission.`item_name` as permission FROM `admin_users` AS admin INNER JOIN `auth_assignment` AS permission ON permission.`user_id` = admin.`id` WHERE admin.`status` <> 2 ORDER BY id DESC")->queryAll();    }    public static function permissionAdmin($item_name, $id)    {        return Yii::$app->db->createCommand("UPDATE `auth_assignment` SET `item_name`=:item_name WHERE `user_id`=:user_id", ['item_name' => $item_name, ':user_id' => $id])->execute();    }    public static function getAdminsOne($id)    {        return Yii::$app->db->createCommand("SELECT admin.`id`,admin.`name`,admin.`username`,admin.`email`,admin.`phone`,admin.`status`,permission.`item_name` as permission FROM `admin_users` AS admin INNER JOIN `auth_assignment` AS permission ON permission.`user_id` = admin.`id` WHERE admin.`id`=:id AND admin.`status` <> 2", [':id' => $id])->queryOne();    }    public static function adminDeleteOne($id)    {        return Yii::$app->db->createCommand("UPDATE `admin_users` SET `status`= 2 WHERE `id`=:id", [':id' => $id])->execute();    }}