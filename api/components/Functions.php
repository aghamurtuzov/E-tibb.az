<?PHPnamespace api\components;use api\models\SiteDoctorFilesModel;use api\components\ImageUpload;use yii\web\UploadedFile;use api\models\Jcode;use Yii;class Functions {    public static function JCode()    {        $config = Yii::$app->params['config.jcode'];        $count           = count($config['keys'])-1;        $key             = $config['keys'][rand(0,$count)].$config['staticKey'].$config['keys'][rand(0,$count)];        $base64Key       = str_replace(['+', '/', '='], ['-', '_', ''], base64_encode(strrev($key)));        $signature       = md5(strrev(md5($base64Key.$config['staticKey'].$base64Key)));        $base64Signature = str_replace(['+', '/', '='], ['-', '_', ''],base64_encode($signature));        $nouns           = round(microtime(true) * 1000+150/3);        $base64nouns     = strrev(str_replace(['+', '/', '='], ['-', '_', ''],base64_encode($nouns)));        return $base64Key.'.'.$base64Signature.'.'.$base64nouns;        //$signature = hash_hmac($config['alg'], $base64Key, $config['staticKey'], true);    }    public static function JCodeDecode($token)    {        Yii::$app->db->schema->refresh();        $config = Yii::$app->params['config.jcode'];        $expToken = explode('.',$token);        if(isset($expToken[0]) && isset($expToken[1]) && isset($expToken[2]))        {            $key = base64_decode(str_replace(['-', '_'],['+', '/'],$expToken[0]).'==');            if(isset($key))            {                $key = strrev($key);                $keyExp = explode($config['staticKey'],$key);                if(isset($keyExp[0]) && isset($keyExp[1]))                {                    if(in_array($keyExp[0],$config['keys']) && in_array($keyExp[1],$config['keys']))                    {                        $base64Key  = str_replace(['+', '/', '='], ['-', '_', ''], base64_encode(strrev($key)));                        $signature = md5(strrev(md5($base64Key.$config['staticKey'].$base64Key)));                        $base64Signature = str_replace(['+', '/', '='], ['-', '_', ''], base64_encode($signature));                        if($base64Key.'.'.$base64Signature === $expToken[0].'.'.$expToken[1])                        {                            $nouns = intval(base64_decode(str_replace(['-', '_'],['+', '/'],strrev($expToken[2]).'==')));                            $token = Jcode::find()->select('token')->where(['id'=>1])->scalar();                            if(!empty($token))                            {                                $token = intval($token);                                if($nouns>$token)                                {                                    $tokenUpdate = Jcode::find()->where(['id'=>1])->one();                                    $tokenUpdate->token = $nouns;                                    $tokenUpdate->save();                                    return true;                                }                            }                        }                        //$signature = hash_hmac($config['alg'], $base64Key, $config['staticKey'], true);                    }                }            }        }    }    public static function promoCodeGenerator($type,$id)    {        $deleted_from = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];        $replaced_from = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'i', 'j', 'k'];        $str = str_replace($deleted_from, $replaced_from, $id);        return ($type == 2 ? $str.'-' : $str);    }    public static function diffExpireDate($date1)    {        $datetime1 = date_create($date1);        $datetime2 = date_create(date('d-m-Y'));        $interval = date_diff($datetime2, $datetime1);        return $interval->format('%r%a');    }    public static function filterWord($str)    {        $array = include(Yii::getAlias('@frontend/components/words.php'));        $str2 = str_replace($array,"***",$str);        return $str2;    }    public static function customIndexArray($array,$index,$asociative = false)    {        $return = [];        if(!empty($array))        {            foreach($array as $key => $val)            {                if(!$asociative)                {                    $return[$val[$index]] = $val;                }else{                    $return[$val[$index]][] = $val;                }            }        }        return $return;    }    public static function getUploadUrl($rootPath = null)    {        $rootPath = empty($rootPath) ? 'upload/' : $rootPath.'/';        return self::getSiteUrl().'/'.$rootPath;    }    public static function aze_times($data){        Yii::$app->formatter->locale = 'az-AZ';        return Yii::$app->formatter->asDate($data,'long');    }    public static function getSiteUrl()    {        /*return (isset($_SERVER['HTTPS']) ? "https" : "http") . "://".Yii::$app->request->serverName;*/        return "http://".Yii::$app->request->serverName;    }    public static function pre($data)    {        echo '<div style="background:#fff;color: #000;font-weight: bold;"><pre>'.print_r($data).'</pre></div>';    }    public static function getVisitorIp() {        if( array_key_exists('HTTP_X_FORWARDED_FOR', $_SERVER) && !empty($_SERVER['HTTP_X_FORWARDED_FOR']) ) {            if (strpos($_SERVER['HTTP_X_FORWARDED_FOR'], ',')>0) {                $addr = explode(",",$_SERVER['HTTP_X_FORWARDED_FOR']);                return trim($addr[0]);            } else {                return $_SERVER['HTTP_X_FORWARDED_FOR'];            }        }        else {            return $_SERVER['REMOTE_ADDR'];        }    }    public static function SosialLinkType($model,$selected = null)    {        $linkOptions = null;        if(isset(Yii::$app->params['allow.sosial_icons']))        {            foreach(Yii::$app->params['allow.sosial_icons'] as $index => $val)            {                if($model->isNewRecord)                {                    $linkOptions .= "<option value=\"{$index}\">$val</option>";                }else{                    if(!empty($selected))                    {                        $atr_Selected = $index == $selected ? 'selected' : null;                    }else{                        $atr_Selected = null;                    }                    $linkOptions .= "<option value=\"{$index}\" ".$atr_Selected.">$val</option>";                }            }        }        return $linkOptions;    }    public static function PhoneNumberType($model,$selected = null)    {        $numberOptions = null;        if(isset(Yii::$app->params['allow.number_type']))        {            foreach(Yii::$app->params['allow.number_type'] as $index => $val)            {                if($model->isNewRecord)                {                    $numberOptions .= "<option value=\"{$index}\">$val</option>";                }else{                    if(!empty($selected))                    {                        $atr_Selected = $index == $selected ? 'selected' : null;                    }else{                        $atr_Selected = null;                    }                    $numberOptions .= "<option value=\"{$index}\" ".$atr_Selected.">$val</option>";                }            }        }        return $numberOptions;    }    public static function getDoctorLink($spc,$id,$slug)    {        $spc_names = null;        if(!isset($spc[1]))        {            $spc_names = $spc[0]['slug'];        }else{            foreach($spc as $key => $val)            {                $spc_names .= $val['slug'].'-';            }            $spc_names = trim($spc_names,'-');        }        return $spc_names.'/'.$slug.'-'.$id;    }    public static function slugify($slug,$options = array())    {        $space = '-';        $slug  = strip_tags($slug);        $spacesDuplicateHypens       = '/[\-\s]+/';        $lettersNumbersSpacesHyphens = '/[^\-\s\pN\pL]+/u';        $slug = preg_replace($lettersNumbersSpacesHyphens, '', $slug);        $slug = preg_replace($spacesDuplicateHypens, $space, $slug);        $slug = trim($slug, '-');        if(strlen($slug)>190) $slug = mb_substr($slug,0,190,"UTF-8");        $slug = mb_strtolower($slug, 'UTF-8');        $from = ['ü','ö','ğ','ı','ə','ç','ş','а', 'б', 'в', 'г', 'д', 'е', 'ё', 'ж', 'з', 'и', 'й', 'к', 'л',            'м', 'н', 'о', 'п', 'р', 'с', 'т', 'у', 'ф', 'х', 'ц', 'ч', 'ш',            'щ', 'ъ', 'ы', 'ь', 'э', 'ю', 'я'];        $to = ['u','o','g','i','e','c','s','a', 'b', 'v', 'g', 'd', 'e', 'yo', 'zh', 'z', 'i', 'j', 'k', 'l',            'm', 'n', 'o', 'p', 'r', 's', 't', 'u', 'f', 'kh', 'c', 'ch', 'sh',            'shh', '_', 'y', '', 'e', 'yu', 'ya'];        $slug = str_replace($from,$to,$slug);        $slug = str_replace(' ','',$slug);        return $slug;    }    public $menuView;    public function makeMenu($data,$index = 0)    {        if(!empty($data))        {            $class = $index == 0 ? 'main-menu': null;            $class = $index == 5 ? 'big-menu': $class;            $this->menuView  .= "<ul class=\"{$class}\">";            if(isset($data[$index]))            {                foreach($data[$index] as $key => $val)                {                    $target = $val['target'] == 1 ? 'target="_blank"' : null;                    $link   = $val['link'];                    if($val['type'] == 2){                        $link = Yii::$app->params['site.enterprise_slug'].'/'.$val['link'].'-'.$val['id'];                    }elseif($val['type'] == 3){                        $link = 'kateqoriya/'.$val['link'];                    }else if($val['type']==1){                        $link = Yii::$app->params['site.static_slug'].'/'.$val['link'];                    }                    $link   = isset($data[$val['id']]) ? "javascript:void(0);" : $link;                    $dropDownElement = isset($data[$val['id']]) ? '<span class="fa fa-caret-down"></span>' : null;                    $this->menuView .= "<li><a href=\"{$link}\" {$target} >{$val['name']} {$dropDownElement}</a>";                    if(isset($data[$val['id']]))                    {                        $this->makeMenu($data,$val['id']);                    }                    $this->menuView .= '</li>';                }            }            $this->menuView .= '</ul>';        }        return $this->menuView;    }    public static function textLimit($expression,$max)    {        $expression = trim(strip_tags($expression));        if($max > strlen($expression)){ return $expression; }        $return = mb_substr($expression,0,($max-3),'UTF-8').'...';        return $return;    }    public static function getDatetime($datetime,$params = [])    {        $params['type']   = empty($params['type']) ? 'datetime': $params['type'];        $params['month']  = empty($params['month']) ? 'yes': $params['month'];        $params['combine']= empty($params['combine']) ? ' ' : $params['combine'];        if(!strpos($datetime,'-'))        {            $datetime = date('Y-m-d H:i:s', $datetime);        }        if(strpos($datetime,':'))        {            preg_match('/(\d{4})-(\d{2})-(\d{2}) (\d{2}):(\d{2}):(\d{2})/',$datetime, $matches);        }else{            preg_match('/(\d{4})-(\d{2})-(\d{2})/',$datetime, $matches);            $params['type'] = 'date';        }        $month = $params['month'] == 'yes' ? Yii::$app->params['months'][$matches[2]-1] : $matches[2];        if($params['type'] == 'datetime')        {            if(isset($matches[4]) && isset($matches[5]))            {                return $matches[3].$params['combine'].$month.$params['combine'].$matches[1].' '.$matches[4].':'.$matches[5];            }        }        if($params['type'] == 'date')        {            return intval($matches[3]).$params['combine'].$month.$params['combine'].$matches[1];        }        if($params['type'] == 'time')        {            return $matches[4].':'.$matches[5];        }    }    public static function getFlash($key,$type = 'danger')    {        $types = ['success','danger','info','warning'];        if(in_array($type,$types))        {            if(Yii::$app->session->hasFlash($key)){                return  '<div class="alert alert-'.$type.' -h-top" role="alert">'.Yii::$app->session->getFlash($key).'</div>';            }        }        return null;    }    public static function getCleanText($data)    {        if(!empty($data)){            return stripslashes(strip_tags(str_replace('"','&quot;',trim($data))));        }    }    public static function SendRequestWithCurl($request)    {        $curl = curl_init();        curl_setopt_array($curl, array(            CURLOPT_RETURNTRANSFER => 1,            CURLOPT_URL => $request,            CURLOPT_USERAGENT => 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36'        ));        $resp = curl_exec($curl);        curl_close($curl);        return $resp;    }    public static function exp_time($interval){        $time           = strtotime('07:00');        $i              = 0;        $loop           = 29;        //$interval       = 30;        while($i<$loop){            if($interval==30){                $loop = 29;            }else if($interval==45){                $loop = 19;            }else if($interval==60){                $loop = 14;            }            if($interval == 30){                $startTime  = date("H:i", strtotime('+30 minutes', $time));                $time       = strtotime($startTime);                $endTime    = date("H:i", strtotime('+30 minutes', $time));            }else if($interval == 45){                $startTime  = date("H:i", strtotime('+45 minutes', $time));                $time       = strtotime($startTime);                $endTime    = date("H:i", strtotime('+45 minutes', $time));            }else if($interval == 60){                $startTime  = date("H:i", strtotime('+60 minutes', $time));                $time       = strtotime($startTime);                $endTime    = date("H:i", strtotime('+60 minutes', $time));            }            $list[] = $startTime.'-'.$endTime;            $time   = strtotime($startTime);            $i++;        }        return $list;    }    public static function xss_clean($data)    {        // Fix &entity\n;        $data = str_replace(array('&amp;','&lt;','&gt;'), array('&amp;amp;','&amp;lt;','&amp;gt;'), $data);        $data = preg_replace('/(&#*\w+)[\x00-\x20]+;/u', '$1;', $data);        $data = preg_replace('/(&#x*[0-9A-F]+);*/iu', '$1;', $data);        $data = html_entity_decode($data, ENT_COMPAT, 'UTF-8');        // Remove any attribute starting with "on" or xmlns        $data = preg_replace('#(<[^>]+?[\x00-\x20"\'])(?:on|xmlns)[^>]*+>#iu', '$1>', $data);        // Remove javascript: and vbscript: protocols        $data = preg_replace('#([a-z]*)[\x00-\x20]*=[\x00-\x20]*([`\'"]*)[\x00-\x20]*j[\x00-\x20]*a[\x00-\x20]*v[\x00-\x20]*a[\x00-\x20]*s[\x00-\x20]*c[\x00-\x20]*r[\x00-\x20]*i[\x00-\x20]*p[\x00-\x20]*t[\x00-\x20]*:#iu', '$1=$2nojavascript...', $data);        $data = preg_replace('#([a-z]*)[\x00-\x20]*=([\'"]*)[\x00-\x20]*v[\x00-\x20]*b[\x00-\x20]*s[\x00-\x20]*c[\x00-\x20]*r[\x00-\x20]*i[\x00-\x20]*p[\x00-\x20]*t[\x00-\x20]*:#iu', '$1=$2novbscript...', $data);        $data = preg_replace('#([a-z]*)[\x00-\x20]*=([\'"]*)[\x00-\x20]*-moz-binding[\x00-\x20]*:#u', '$1=$2nomozbinding...', $data);        // Only works in IE: <span style="width: expression(alert('Ping!'));"></span>        $data = preg_replace('#(<[^>]+?)style[\x00-\x20]*=[\x00-\x20]*[`\'"]*.*?expression[\x00-\x20]*\([^>]*+>#i', '$1>', $data);        $data = preg_replace('#(<[^>]+?)style[\x00-\x20]*=[\x00-\x20]*[`\'"]*.*?behaviour[\x00-\x20]*\([^>]*+>#i', '$1>', $data);        $data = preg_replace('#(<[^>]+?)style[\x00-\x20]*=[\x00-\x20]*[`\'"]*.*?s[\x00-\x20]*c[\x00-\x20]*r[\x00-\x20]*i[\x00-\x20]*p[\x00-\x20]*t[\x00-\x20]*:*[^>]*+>#iu', '$1>', $data);        // Remove namespaced elements (we do not need them)        $data = preg_replace('#</*\w+:\w[^>]*+>#i', '', $data);        do        {            // Remove really unwanted tags            $old_data = $data;            $data = preg_replace('#</*(?:applet|b(?:ase|gsound|link)|embed|frame(?:set)?|i(?:frame|layer)|l(?:ayer|ink)|meta|object|s(?:cript|tyle)|title|xml)[^>]*+>#i', '', $data);        }        while ($old_data !== $data);        // we are done...        return $data;    }    public static function deleteFiles($type,$deletedFiles,$customPath,$connect_id,$userType = 1)    {        if(!empty($deletedFiles))        {            $delete = SiteDoctorFilesModel::find()->where(['connect_id'=>$connect_id,'user_type'=>$userType,'type'=>$type])->andWhere(['in','id',$deletedFiles])->all();            if(!empty($delete))            {                foreach($delete as $key => $val)                {                    $imageUpload = new ImageUpload();                    $imageUpload->deleteFile([$customPath.'/'.$val['file_photo']]);                    $imageUpload->deleteFile([$customPath.'/small/'.$val['file_photo']]);                    $val->delete();                }            }        }    }    public static function uploadFiles($photos,$connect_id,$type,$custompath,$user_type)    {        if(!empty($photos))        {            foreach($photos as $key => $photo)            {                $imageUpload = new ImageUpload();                $uploadedFile = $imageUpload->saveFile($photo,[                    'path.save'=>$custompath,                    'resize.img'=>[800,470],                    'resize.thumb'=>[215,140]                ]);                if(!empty($uploadedFile))                {                    $files             = new SiteDoctorFilesModel();                    $files->file_photo = $uploadedFile;                    $files->connect_id = $connect_id;                    $files->type       = $type;                    $files->user_type  = $user_type;                    $files->save();                }            }        }    }}?>